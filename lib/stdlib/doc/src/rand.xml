<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2015</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.

      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.

    </legalnotice>

    <title>rand</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno>1</docno>
    <approved></approved>
    <checked></checked>
    <date></date>
    <rev>A</rev>
    <file>rand.xml</file>
  </header>
  <module>rand</module>
  <modulesummary>Pseudo random number generation</modulesummary>
  <description>
    <p>Random number generator. </p>
    <p>The module contains several different algorithms and
    can be extended with more in the future.  The current algorithms
    are attributed to Sebastiano Vigna, see http://xorshift.di.unimi.it.</p>

    <p>The implemented algorithms are: <c>exsplus</c> with 58 bits
    precision and a period of 2^116-1. <c>exs64</c> with 64 bits
    precision and a period of 2^64-1. <c>exs1024</c> with 64 bits
    precision and a period of 2^1024-1.
    </p>

    <p>The current default algorithm is <c>exsplus</c>, the default
    may change in future. If a specific algorithm is required be sure
    to always use <c>seed/1</c> to initialize the state.
    </p>

    <p>Every time a random number is requested, a state is used to
    calculate it, and a new state produced. The state can either be
    implicit or be an explicit argument and return value.
    </p>

    <p>The functions with implicit state use the process dictionary
    variable <c>rand_seed</c> to remember the current state.</p>
    <p>If a process calls <c>uniform/0</c> or <c>uniform/1</c> without
    setting a seed first, <c>seed/1</c> is called automatically with
    the default algorithm.</p>

    <p>The functions with a explicit state never uses the process dictionary.</p>

    <p>Examples:</p>
    <pre>
      %% Simple usage, creates and seeds the default algorithm
      %% with a non constant seed if not already done.
      R0 = rand:uniform().
      R1 = rand:uniform().

      %% Use a given algorithm
      rand:seed(exs1024).
      R2 = rand:uniform().

      %% Use a given algorithm with a constant seed
      rand:seed(exs1024, {123, 123534, 345345}).
      R3 = rand:uniform().

      %% Use the functional api with non constant seed
      S0 = rand:seed_s(exsplus).
      {R4, S1} = rand:uniform_s(S0).
    </pre>

    <p>It should be noted that this random number generator is not cryptographically
    strong. If a strong cryptographic random number generator is needed for
    example <c>crypto:rand_bytes/1</c> could be used instead.</p>
  </description>
  <datatypes>
    <datatype>
      <name name="alg"/>
    </datatype>
    <datatype>
      <name name="alg_seed"/>
      <desc><p>Algorithm dependent state.</p></desc>
    </datatype>

    <datatype>
      <name name="state"/>
    </datatype>

  </datatypes>

  <funcs>
    <func>
      <name name="seed" arity="1"/>
      <fsummary>Seeds random number generator</fsummary>
      <desc><marker id="seed-1"/>
	<p>Seeds random number generation with the given algorithm or
	an exported seed in the process dictionary, and returns the state.</p>
      <p><em>See also:</em> <seealso marker="#export_seed-0">export_seed/0</seealso>.</p>
      </desc>
    </func>
    <func>
      <name name="seed_s" arity="1"/>
      <fsummary>Seeds random number generator</fsummary>
      <desc>
	<p>Seeds random number generation with the given algorithm or
	an exported seed, and returns the state.</p>
	<p><em>See also:</em> <seealso marker="#export_seed-0">export_seed/0</seealso>.</p>
      </desc>
    </func>
    <func>
      <name name="seed" arity="2"/>
      <fsummary>Seeds the random number generation</fsummary>
      <desc>
      <p>Seeds random number generation with the given algorithm and
      integers in the process dictionary and returns
      the state.</p>
      </desc>
    </func>
    <func>
      <name name="seed_s" arity="2"/>
      <fsummary>Seeds the random number generation</fsummary>
      <desc>
	<p>Seeds random number generation with the given algorithm and
	integers and returns the state.</p>
      </desc>
    </func>

    <func>
      <name name="export_seed" arity="0"/>
      <fsummary>Exports the random number generation state</fsummary>
      <desc><marker id="export_seed-0"/>
      <p>Returns the random number state in an external format.
      To be used with <seealso marker="#seed-1">seed/1</seealso>.</p>
      </desc>
    </func>

    <func>
      <name name="export_seed_s" arity="1"/>
      <fsummary>Exports the random number generation state</fsummary>
      <desc><marker id="export_seed_s-1"/>
      <p>Returns the random number generator state in an external format.
      To be used with <seealso marker="#seed-1">seed/1</seealso>.</p>
      </desc>
    </func>

    <func>
      <name name="uniform" arity="0"/>
      <fsummary>Return a random float</fsummary>
      <desc>
        <p>Returns a random float uniformly distributed between <c>0.0</c>
        and <c>1.0</c>, updating the state in the process dictionary.</p>
      </desc>
    </func>
    <func>
      <name name="uniform" arity="1"/>
      <fsummary>Return a random integer</fsummary>
      <desc>
        <p>Given an integer <c><anno>N</anno> >= 1</c>, <c>uniform/1</c> returns a
        random integer uniformly distributed between <c>1</c> and
        <c><anno>N</anno></c>, updating the state in the process dictionary.</p>
      </desc>
    </func>
    <func>
      <name name="uniform_s" arity="1"/>
      <fsummary>Return a random float</fsummary>
      <desc>
        <p>Given a state, <c>uniform_s/1</c>returns a random float uniformly
        distributed between <c>0.0</c> and <c>1.0</c>, and a new state.</p>
      </desc>
    </func>
    <func>
      <name name="uniform_s" arity="2"/>
      <fsummary>Return a random integer</fsummary>
      <desc>
        <p>Given an integer <c><anno>N</anno> >= 1</c> and a state, <c>uniform_s/2</c>
        returns a random integer uniformly distributed between <c>1</c> and
        <c><anno>N</anno></c>, and a new state.</p>
      </desc>
    </func>
  </funcs>

</erlref>
